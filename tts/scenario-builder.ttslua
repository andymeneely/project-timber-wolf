function buildScenario(save_string)
  hideAllDrawers()
  local hextiles = parseTileList(save_string)
  local x_start = -19.59
  local z_start = 19.88
  local hex_width = 3.96
  local z_shift = 3.43 -- i.e. spacing between hexes
  local stride = math.sqrt(getn(hextiles))
  local odd_row_shift = 1.9

  for i,t in pairs(hextiles) do
    row = math.floor((i - 1) / stride)
    col = (i - 1) % stride
    hex_x = x_start + col * hex_width + (row % 2)* odd_row_shift
    hex_z = z_start - row * z_shift
    if(isHex(t)) then
      placeHex(t, hex_x, hex_z)
      placeChits(t, hex_x, hex_z)
    elseif(isExit(t)) then
      placeExit(t, hex_x, hex_z)
    end
  end

  placeEventDeck(parseEventDeck(save_string))
  -- placeSecurityChits(parseSecurityBag(save_string))
  broadcastLocation(save_string)
end

-- Tile list is after the last | char
function parseTileList(save_string)
  local title = save_string:gsub("|.*$",''):gsub("+"," ") -- not using, strip away
  local tile_list = '';
  for w in save_string:gmatch("([^|]+)") do
    tile_list = w
  end

  local hextiles = {}
  local t_i = 1
  for t in tile_list:gmatch("[^ ]+") do
    hextiles[t_i] = t
    t_i = t_i + 1
  end
  return hextiles
end

function placeHex(t, hex_x, hex_z)
  local hex_y = 10
  if(t ~= "SC") then -- normalize rotation and flip accordingly
    r = {x=0,y=150,z=180}
  else
    r = {x=0,y=210,z=0}
  end
  local tile_bag = getObjectFromGUID(tile_bag_guid)
  tile_bag.takeObject({ position={ x=hex_x, y=hex_y, z=hex_z, }, rotation=r })
end

function placeExit(t, hex_x, hex_z)
  local hex_y = 10
  local r = 0
  local dx = 0 -- nudge amount
  local dz = 0 -- nudge amount

  if     t == 'E1' then dx = 0.40; dz = 0.70;  r = 210
  elseif t =='E2' then dx = 0.80;              r = 180
  elseif t =='E3' then dx = 0.40;  dz = -0.70; r = 150
  elseif t =='E4' then dx = -0.40; dz = -0.70; r = 210
  elseif t =='E5' then dx = -0.80;             r = 180
  elseif t =='E6' then dx = -0.40; dz = 0.70;  r = 150
  end

  local chit_bag = getObjectFromGUID(entrance_bag_guid)
  chit_bag.takeObject({
    position={ x=hex_x + dx, y=hex_y, z=hex_z + dz },
    rotation={ x=0,          y=r,     z=0},
  })
end

function placeChits(t, hex_x, hex_z)
  local guard_bag = getObjectFromGUID(guard_bag_guid)
  local lock_bag = getObjectFromGUID(lock_bag_guid)
  local camera_bag = getObjectFromGUID(camera_bag_guid)
  local folder_bag = getObjectFromGUID(folder_bag_guid)
  local keycard_bag = getObjectFromGUID(keycard_bag_guid)
  local guard_bag = getObjectFromGUID(guard_bag_guid)
  local jewel_bag = getObjectFromGUID(jewel_bag_guid)
  local usb_bag = getObjectFromGUID(usb_bag_guid)
  local asterisk_bag = getObjectFromGUID(asterisk_bag_guid)
  local money_1k_bag = getObjectFromGUID(money_1k_bag_guid)
  local money_2k_bag = getObjectFromGUID(money_2k_bag_guid)
  local money_5k_bag = getObjectFromGUID(money_5k_bag_guid)
  local guard_dog_bag = getObjectFromGUID(guard_dog_bag_guid)
  local reinforcements_bag = getObjectFromGUID(reinforcements_bag_guid)
  local keycard_door_bag = getObjectFromGUID(keycard_door_bag_guid)
  local remote_lock_y_bag = getObjectFromGUID(remote_lock_y_bag_guid)
  local server_x_bag = getObjectFromGUID(server_x_bag_guid)
  local server_y_bag = getObjectFromGUID(server_y_bag_guid)
  local kennel_bag = getObjectFromGUID(kennel_bag_guid)
  local safe_bag = getObjectFromGUID(safe_bag_guid)
  local item_bag = getObjectFromGUID(item_bag_guid)
  local watchtower_bag = getObjectFromGUID(watchtower_bag_guid)
  local remote_lock_x_bag = getObjectFromGUID(remote_lock_x_bag_guid)
  local meeple_bag = getObjectFromGUID(white_meeple_bag_guid)
  local lockdown_a_bag = getObjectFromGUID(lockdown_a_bag_guid)
  local lockdown_b_bag = getObjectFromGUID(lockdown_b_bag_guid)
  local lockdown_c_bag = getObjectFromGUID(lockdown_c_bag_guid)
  local lockdown_d_bag = getObjectFromGUID(lockdown_d_bag_guid)

  d = 0.65 -- nudge amount for 2 chits
  if t == 'GU'     then place1Chit(guard_bag, hex_x, hex_z)
  elseif t == 'LO' then place1Chit(lock_bag, hex_x, hex_z)
  elseif t == 'CM' then place1Chit(camera_bag, hex_x, hex_z)
  elseif t == 'DO' then place1Chit(guard_dog_bag, hex_x, hex_z)
  elseif t == 'JW' then place1Chit(jewel_bag, hex_x, hex_z)
  elseif t == '$1' then place1Chit(money_1k_bag, hex_x, hex_z)
  elseif t == '$2' then place1Chit(money_2k_bag, hex_x, hex_z)
  elseif t == '$3' then place2Chits(money_1k_bag, money_2k_bag, hex_x, hex_z)
  elseif t == 'PP' then place1Chit(folder_bag, hex_x, hex_z)
  elseif t == 'USB' then place1Chit(usb_bag, hex_x, hex_z)
  elseif t == 'WT' then place1Chit(watchtower_bag, hex_x, hex_z, 30)
  elseif t == 'RE' then place1Chit(reinforcements_bag, hex_x, hex_z, 30)
  elseif t == '*'  then place1Chit(asterisk_bag, hex_x, hex_z)
  elseif t == 'G2' then place2Chits(guard_bag, guard_bag, hex_x, hex_z)
  elseif t == 'L2' then place2Chits(lock_bag, lock_bag, hex_x, hex_z)
  elseif t == 'C2' then place2Chits(camera_bag, camera_bag, hex_x, hex_z)
  elseif t == '2GL' then place2Chits(guard_bag, lock_bag, hex_x, hex_z)
  elseif t == '2GC' then place2Chits(guard_bag, camera_bag, hex_x, hex_z)
  elseif t == '2GD' then place2Chits(guard_bag, guard_dog_bag, hex_x, hex_z)
  elseif t == 'G1K' then place2Chits(guard_bag, money_1k_bag, hex_x, hex_z)
  elseif t == 'G2K' then place2Chits(guard_bag, money_2k_bag, hex_x, hex_z)
  elseif t == 'GDGD' then place2Chits(guard_dog_bag, guard_dog_bag, hex_x, hex_z)
  elseif t == 'GA' then place1Chit(lockdown_a_bag, hex_x, hex_z, 30)
  elseif t == 'GB' then place1Chit(lockdown_b_bag, hex_x, hex_z, 30)
  elseif t == 'GC' then place1Chit(lockdown_c_bag, hex_x, hex_z, 30)
  elseif t == 'GD' then place1Chit(lockdown_d_bag, hex_x, hex_z, 30)
  elseif t == '2CL' then place2Chits(camera_bag, lock_bag, hex_x, hex_z)
  elseif t == '2CD' then place2Chits(camera_bag, guard_dog_bag, hex_x, hex_z)
  elseif t == '2LD' then place2Chits(lock_bag, guard_dog_bag, hex_x, hex_z)
  elseif t == 'GKC' then place2Chits(keycard_bag, guard_bag, hex_x, hex_z)
  elseif t == 'KC' then place1Chit(keycard_bag, hex_x, hex_z)
  elseif t == 'SX' then place1Chit(server_x_bag, hex_x, hex_z, 30)
  elseif t == 'SY' then place1Chit(server_y_bag, hex_x, hex_z, 30)
  elseif t == 'RX' then place1Chit(remote_lock_x_bag, hex_x, hex_z, 30)
  elseif t == 'RY' then place1Chit(remote_lock_y_bag, hex_x, hex_z, 30)
  elseif t == 'DK' then place1Chit(kennel_bag, hex_x, hex_z, 30)
  elseif t == 'S'  then place1Chit(safe_bag, hex_x, hex_z, 30)
  elseif t == 'I'  then place1Chit(item_bag, hex_x, hex_z, 30)
  elseif t == 'RXJ' then place2ChitsStacked(remote_lock_x_bag, jewel_bag, hex_x, hex_z)
  elseif t == 'RXD' then place2ChitsStacked(remote_lock_x_bag, folder_bag, hex_x, hex_z)
  elseif t == 'RXM' then place2ChitsStacked(remote_lock_x_bag, meeple_bag, hex_x, hex_z, 30)
  elseif t == 'RYJ' then place2ChitsStacked(remote_lock_y_bag, jewel_bag, hex_x, hex_z)
  elseif t == 'RYD' then place2ChitsStacked(remote_lock_y_bag, folder_bag, hex_x, hex_z)
  elseif t == 'RYM' then place2ChitsStacked(remote_lock_y_bag, meeple_bag, hex_x, hex_z)
  elseif t == 'KCL' then place1Chit(keycard_door_bag, hex_x, hex_z)
  elseif t == 'MW' then place1Chit(meeple_bag, hex_x, hex_z)
  elseif t == 'E1' then placeExit(1, hex_x, hex_z)
  elseif t == 'E2' then placeExit(2, hex_x, hex_z)
  elseif t == 'E3' then placeExit(3, hex_x, hex_z)
  elseif t == 'E4' then placeExit(4, hex_x, hex_z)
  elseif t == 'E5' then placeExit(5, hex_x, hex_z)
  elseif t == 'E6' then placeExit(6, hex_x, hex_z)
  end
end

function place1Chit(bag, cx, cz, r)
  local r = r or 0
  local chit_y = 15
  bag.takeObject({
    position = { x = cx, y = chit_y, z = cz },
    rotation = { x = 0, y = 180 + r, z = 0 }
  })
end

function place2Chits(bag1, bag2, cx,  cz, r)
  local r = r or 0
  local chit_y = 15
  d = 0.65 -- nudge amount for 2 chits
  bag1.takeObject({
    position = { x = cx - d, y = chit_y, z = cz - d },
    rotation = { x = 0, y = 180 + r, z = 0 }
  })
  bag2.takeObject({
    position = { x = cx + d, y = chit_y, z = cz + d },
    rotation = { x = 0, y = 180 + r, z = 0 }
  })
end

function place2ChitsStacked(bag1, bag2, cx,  cz, r)
  local r = r or 0
  local chit_y = 15
  d = 0.65 -- nudge amount for 2 chits
  bag1.takeObject({
    position = { x = cx, y = chit_y - 5, z = cz },
    rotation = { x = 0, y = 180 + r, z = 0 }
  })
  bag2.takeObject({
    position = { x = cx, y = chit_y, z = cz },
    rotation = { x = 0, y = 180, z = 0 }
  })
end

-- Not a gap, not an exit, not a tunnel
function isHex(tile)
  return tile ~= "GP"
     and tile ~= "E1"
     and tile ~= "E2"
     and tile ~= "E3"
     and tile ~= "E4"
     and tile ~= "E5"
     and tile ~= "E6"
     and tile ~= "T"
end

function isExit(tile)
  return tile == "E1"
     or tile == "E2"
     or tile == "E3"
     or tile == "E4"
     or tile == "E5"
     or tile == "E6"
end

function parseEventDeck(str)
  local i = 0;
  eventStr = ''

  for w in str:gmatch("([^|]+)") do
    if i == 13 then -- assuming scenario designer v1.16
      eventStr = w
    end
    i = i + 1
  end

  return eventStr
end

function placeEventDeck(event_str)
  if event_str == nil or event_str == '' then
    return
  end

  spawnNotecard(event_str)

  deck_pos_x = -8
  deck_pos_y = 5.0
  deck_pos_z = 24

  events = parseEventString(event_str)

  getObjectFromGUID(event_deck_bag_guid).takeObject({
    position = {x = deck_pos_x, y = deck_pos_y, z = deck_pos_z},
    callback_function = function(event_deck) dealEventDeck(event_deck, events) end
  })

  getObjectFromGUID(crisis_deck_bag_guid).takeObject({
    position = {x = deck_pos_x, y = deck_pos_y, z = deck_pos_z - 3},
    callback_function = function(crisis_deck) dealEventDeck(crisis_deck, events) end
  })
end

function parseEventString(event_str)
  local active_events = {}
  local i = 1
  for w in event_str:gmatch("([^,]+)") do
    if w:find("%-") then -- range
      local lower = nil
      local upper = nil
      for b in w:gmatch("([^-]+)") do -- e.g. get 1 and 5 from 1-5
        if lower == nil then
          lower = tonumber(b)
        else
          upper = tonumber(b)
        end
      end
      for j=lower,upper do
        active_events[tostring(j)] = i
        i = i + 1
      end
    else -- otherwise, just a single, e.g. D5
      active_events[w] = i
      i = i + 1
    end
  end
  return active_events
end

function dealEventDeck(deck, active_events)
  local n_events = 0; for _,_ in pairs(active_events) do n_events = n_events + 1 end -- because table.getn doesn't exist in TTS?!?!?
  local x_start = -6
  local x_distance = 56 -- total width of event spread
  local x_shift = x_distance / n_events
  local card_positions = {}

  for event, order in pairs(active_events) do
    if event != nil or event != '' then
      event_key = '<' .. event .. '>'
      for _, card_info in pairs(deck.getObjects()) do
        if card_info.name:find(event_key) then
          card_positions[card_info.guid] = {
            x = x_start + order * x_shift,
            y = 1.0 + (n_events - order) * 0.5,
            z = 24
          }
          break; -- don't deal multiple copies of the same card;
        end
      end
    end
  end

  for guid, pos in pairs(card_positions) do
    deck.takeObject({ position = pos, guid = guid })
  end
end

function spawnNotecard(str)
  spawnObject({
    type = "Notecard",
    position = {x=6, y=5, z=30},
    scale = {x=1.7, y=1.7, z=1.7},
    callback_function = function(obj)
      obj.setName('Event Order')
      obj.setDescription(str)
    end
  })
end

function parseSecurityBag(save_string)
  local i = 1
  local bag_chits = { guards=0, cameras=0, locks=0, jewel=0, keycard=0, dog=0,
                      docs=0, usb=0, }
  for w in save_string:gmatch("([^|]+)") do
    if     i == 4 then bag_chits.guards = tonumber(w)
    elseif i == 5 then bag_chits.cameras = tonumber(w)
    elseif i == 6 then bag_chits.locks = tonumber(w)
    elseif i == 7 then bag_chits.jewel = tonumber(w)
    elseif i == 8 then bag_chits.keycard = tonumber(w)
    elseif i == 9 then bag_chits.dog = tonumber(w)
    elseif i == 10 then bag_chits.docs = tonumber(w)
    elseif i == 11 then bag_chits.usb = tonumber(w)
    end
    i = i + 1
  end
  return bag_chits
end

function placeSecurityChits(bag_chits)
  placeBagChits(getObjectFromGUID(guard_bag_guid), bag_chits.guards, 10)
  placeBagChits(getObjectFromGUID(camera_bag_guid), bag_chits.cameras, 8)
  placeBagChits(getObjectFromGUID(lock_bag_guid), bag_chits.locks, 6)
  placeBagChits(getObjectFromGUID(jewel_bag_guid), bag_chits.jewel, 4)
  placeBagChits(getObjectFromGUID(keycard_bag_guid), bag_chits.keycard, 2)
  placeBagChits(getObjectFromGUID(guard_dog_bag_guid), bag_chits.dog, 0)
  placeBagChits(getObjectFromGUID(docs_bag_guid), bag_chits.docs, -2)
  placeBagChits(getObjectFromGUID(usb_bag_guid), bag_chits.usb, -4)
end

function placeBagChits(bag, n, z)
  for i=1,n do
    bag.takeObject({ position = {x = 28, y=5.0 + i*0.75, z=z} })
  end
end

function broadcastLocation(save_string)
  local location = save_string:match('([^|]*)|'):gsub("+"," ")
  broadcastToAll(location)
end