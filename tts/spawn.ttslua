cream = { r=216/255, g=196/255, b=133/255 } -- #d8c485
brown = { r=107/255, g=71/255,  b=28/255  } -- #6b471c
red =   { r=216/255, g=20/255,  b=20/255 }
green = { r=20/255,  g=216/255, b=20/255  }
blue =  { r=20/255,  g=20/255,  b=216/255  }
purple ={ r=160/255, g=32/255, b=240/255  }
gray ={ r=128/255, g=128/255, b=128/255  }

-- These are convenience methods for running this in-game
-- In the console, type:
-- lua respawnAll()
-- lua respawnChits()
function respawnAll()
  respawnChits()
  respawnMoney()
  respawnHexes()
  respawnTrackers()
  respawnPlanning()
  respawnEvents()
  respawnCharacters()
  respawnSkills()
  respawnNPCs()
  respawnItems()
end

function respawnMoney()
  spawnMoneyChit("chit_1k.png", "chit_1k.png", "$1k", 1)
  spawnMoneyChit("chit_2k.png", "chit_2k.png", "$2k", 2)
  spawnMoneyChit("chit_5k.png", "chit_5k.png", "$5k", 5)
end

function respawnChits()
  spawnCircleChit("chit_guard.png", "chit_subdued.png", 'Guard')
  spawnCircleChit("chit_locked.png", "chit_unlocked.png", 'Lock')
  spawnCircleChit("chit_camera.png", "chit_disconnected.png", 'Camera')
  spawnCircleChit("chit_guard-dog.png", "chit_guard-dog-subdued.png", "Guard Dog")
  spawnCircleChit("chit_usb-key.png", "chit_usb-key.png", "USB key")
  spawnCircleChit("chit_asterisk.png", "chit_asterisk.png", "Asterisk")
  spawnCircleChit("chit_jewel.png", "chit_jewel.png", "Jewel")
  spawnCircleChit("chit_folder.png", "chit_folder.png", "Documents")
  spawnCircleChit("chit_keycard.png", "chit_keycard.png", "Keycard")
  spawnCircleChit("chit_blank.png", "chit_blank.png", "Blank")

  spawnRectChit("chit_idea.png", "chit_idea.png", "Idea")

  spawnHexChit("hex_watchtower.png", "hex_watchtower.png", "Watchtower")
  spawnHexChit("hex_server-x.png", "hex_server-x.png", "Server X")
  spawnHexChit("hex_server-y.png", "hex_server-y.png", "Server Y")
  spawnHexChit("hex_reinforcements.png", "hex_reinforcements.png", "Reinforcements")
  spawnHexChit("hex_remote_lock_x.png", "hex_remote_lock_x.png", "Remote Lock X")
  spawnHexChit("hex_remote_lock_y.png", "hex_remote_lock_y.png", "Remote Lock Y")
  spawnHexChit("hex_keycard-lock.png", "hex_keycard-lock.png", "Keycard Door")
  spawnHexChit("hex_lockdown_A.png", "hex_lockdown_A.png", "Lockdown Gate A")
  spawnHexChit("hex_lockdown_B.png", "hex_lockdown_B.png", "Lockdown Gate B")
  spawnHexChit("hex_lockdown_C.png", "hex_lockdown_C.png", "Lockdown Gate C")
  spawnHexChit("hex_lockdown_D.png", "hex_lockdown_D.png", "Lockdown Gate D")
  spawnHexChit("hex_kennel.png", "hex_kennel.png", "Kennel")
  spawnHexChit("hex_safe.png", "hex_safe.png", "Safe")
  spawnHexChit("hex_item.png", "hex_item.png", "Item")
end

function respawnHexes()
  spawnChit("chit_entrance.png", "chit_entrance.png", "Entrance/Exit", 3, cream, 1.0, 0,{})
  spawnHexTile('hex_tile_front.png', 'hex_tile_back.png', "Hex Tile")
end

function respawnTrackers()
  spawnTracker("tracker_00.png", "Noise Tracker (3P)")
  spawnTracker("tracker_01.png", "Noise Tracker (4P)")
  spawnCard("help_front_00.png", "help_back_00.png", "Game Help")
end

function respawnPlanning()
  spawnPlanChit('chit_planning_green.png', 'chit_planning_green.png', "Green Planning Token", green)
  spawnPlanChit('chit_planning_blue.png', 'chit_planning_blue.png', "Blue Planning Token",blue )
  spawnPlanChit('chit_planning_purple.png', 'chit_planning_purple.png', "Purple Planning Token", purple)
  spawnPlanChit('chit_planning_red.png', 'chit_planning_red.png', "Red Planning Token", red)
end

function respawnEvents()
  spawnEventDeck('sheet_events_00.png', 'sheet_events_backs_00.png', 25, 15)
  spawnEventDeck('sheet_events_01.png', 'sheet_events_backs_01.png', 15, 16)

  spawnCrisisDeck('sheet_crises_00.png', 'sheet_crises_backs_00.png', 11)
end

function respawnCharacters()
  spawnCharacterDeck('sheet_characters_00.png', 'sheet_characters_backs_00.png', 24)
  spawnCharacterDeck('sheet_npcs_00.png', 'sheet_npcs_00.png', 6)
end

function respawnSkills()
  spawnSkillDeck('sheet_skills_00.png', 'sheet_skills_backs_00.png', 25)
  spawnSkillDeck('sheet_skills_01.png', 'sheet_skills_backs_01.png', 11)
end

function respawnNPCs()
  spawnFixerDeck('sheet_fixers_00.png', 'sheet_fixers_00.png', 15)
  spawnNPCDeck('sheet_npcs_face_00.png', 'sheet_npcs_back_00.png', 3)
end

function respawnItems()
  spawnItemDeck('sheet_item_00.png', 'sheet_item_backs_00.png', 13)
end

function spawnRectChit(  front, back, name) spawnChit(front, back, name, 3, brown, 0.65, 0, {"Chit"}) end
function spawnMoneyChit(front, back, name, v) spawnChit(front, back, name, 3, brown, 0.65, 0, {"Chit", "Cash"}, v) end
function spawnCard(      front, back, name) spawnChit(front, back, name, 3, brown, 1.2,  0, {"Chit"}) end
function spawnHexChit(   front, back, name) spawnChit(front, back, name, 1, brown, 1.75, 30, {"Chit"}) end
function spawnHexTile(   front, back, name) spawnChit(front, back, name, 1, cream, 2.1,  -30, {"Tile"}) end
function spawnCircleChit(front, back, name) spawnChit(front, back, name, 2, brown, 1.0,  0,  {"Chit"}) end
function spawnPlanChit(front, back, name, tint) spawnChit(front, back, name, 1, tint, 0.35, -30,{"Chit"}) end

function spawnChit(front, back, name, tile_type, tint, s, r, tags, value)
  local url = "https://andymeneely.github.io/project-timber-wolf/"
  local chit_x = -48
  local chit_z = 10
  local random_url_arg = "?v=" .. math.random() -- break the image cache on TTS
  local obj = spawnObject({
    type = "Custom_Tile",
    position = {x=chit_x, y=15, z=chit_z},
    rotation = {x=0, y = 180 - r, z=0},
    scale = {x=s, y=s, z=s},
    callback_function = function(newObj)
      newObj.setName(name)
      newObj.setColorTint(tint)
      newObj.setTags(tags)
      newObj.setValue(value)
    end
  })
  obj.setCustomObject({
    type ="Custom_Tile",
    type = tile_type, -- circlef
    image = url .. front .. random_url_arg,
    image_bottom = url .. back .. random_url_arg,
    thickness = 0.15,
  })
end

function spawnTracker(front, name)
  local url = "https://andymeneely.github.io/project-timber-wolf/"
  local tracker_x = -48
  local tracker_z = 0
  local random_url_arg = "?v=" .. math.random() -- break the image cache on TTS
  local s = 3.0
  local tracker_y = 15
  local obj = spawnObject({
    type = "Custom_Tile",
    position = {x=tracker_x, y=tracker_y, z=tracker_z},
    rotation = {x=0, y = 180, z=0},
    scale = {x=s, y=s, z=s},
    callback_function = |newObj| newObj.setName(name)
  })
  obj.setCustomObject({
    type ="Custom_Tile",
    type = 3, -- rect
    image = url .. front .. random_url_arg,
    image_bottom = url .. front .. random_url_arg,
    thickness = 0.2,
    stackable = false,
  })
  -- this is all hardcoded to a 3.0 scale, if you change s you'll need to recalc
  -- top row (x,z) from 1.05,-0.9 to -1, -0.9
  local ul_x = 1.09; local ul_z = -0.85
  local ur_x = -1.0; local ur_z = 0.85
  local shift_top = (ur_x - ul_x) / 11.0
  -- then side right
  local rside_x = -1.10;
  local rside_z_start = -0.5
  local shift_side = shift_top + 0.03
  -- them bottom row - still left to right though
  local ll_x = 1.04; local ll_z = 0.85
  local shift_bottom = shift_top
  -- left side - top down
  local lside_x = 1.10;
  -- obj.setSnapPoints({
  --   -- top row
  --   { position = { x=ul_x + 0*shift_top, y=0, z=ul_z } },
  --   { position = { x=ul_x + 1*shift_top, y=0, z=ul_z } },
  --   { position = { x=ul_x + 2*shift_top, y=0, z=ul_z } },
  --   { position = { x=ul_x + 3*shift_top, y=0, z=ul_z } },
  --   { position = { x=ul_x + 4*shift_top, y=0, z=ul_z } },
  --   { position = { x=ul_x + 5*shift_top, y=0, z=ul_z } },
  --   { position = { x=ul_x + 6*shift_top, y=0, z=ul_z } },
  --   { position = { x=ul_x + 7*shift_top, y=0, z=ul_z } },
  --   { position = { x=ul_x + 8*shift_top, y=0, z=ul_z } },
  --   { position = { x=ul_x + 9*shift_top, y=0, z=ul_z } },
  --   { position = { x=ul_x + 10*shift_top, y=0, z=ul_z } },
  --   { position = { x=ul_x + 11*shift_top, y=0, z=ul_z } },
  --   -- right side
  --   { position = { x=rside_x, y=0, z=rside_z_start - 0*shift_side } },
  --   { position = { x=rside_x, y=0, z=rside_z_start - 1*shift_side } },
  --   { position = { x=rside_x, y=0, z=rside_z_start - 2*shift_side } },
  --   { position = { x=rside_x, y=0, z=rside_z_start - 3*shift_side } },
  --   { position = { x=rside_x, y=0, z=rside_z_start - 4*shift_side } },
  --   { position = { x=rside_x, y=0, z=rside_z_start - 5*shift_side } },
  --   { position = { x=rside_x, y=0, z=rside_z_start - 6*shift_side } },
  --   -- bottom_row side
  --   { position = { x=ll_x + 0*shift_bottom, y=0, z=ll_z } },
  --   { position = { x=ll_x + 1*shift_bottom, y=0, z=ll_z } },
  --   { position = { x=ll_x + 2*shift_bottom, y=0, z=ll_z } },
  --   { position = { x=ll_x + 3*shift_bottom, y=0, z=ll_z } },
  --   { position = { x=ll_x + 4*shift_bottom, y=0, z=ll_z } },
  --   { position = { x=ll_x + 5*shift_bottom, y=0, z=ll_z } },
  --   { position = { x=ll_x + 6*shift_bottom, y=0, z=ll_z } },
  --   { position = { x=ll_x + 7*shift_bottom, y=0, z=ll_z } },
  --   { position = { x=ll_x + 8*shift_bottom, y=0, z=ll_z } },
  --   { position = { x=ll_x + 9*shift_bottom, y=0, z=ll_z } },
  --   { position = { x=ll_x + 10*shift_bottom, y=0, z=ll_z } },
  --   { position = { x=ll_x + 11*shift_bottom, y=0, z=ll_z } },
  --   -- left side
  --   { position = { x=lside_x, y=0, z=rside_z_start - 0*shift_side } },
  --   { position = { x=lside_x, y=0, z=rside_z_start - 1*shift_side } },
  --   { position = { x=lside_x, y=0, z=rside_z_start - 2*shift_side } },
  --   { position = { x=lside_x, y=0, z=rside_z_start - 3*shift_side } },
  --   { position = { x=lside_x, y=0, z=rside_z_start - 4*shift_side } },
  --   { position = { x=lside_x, y=0, z=rside_z_start - 5*shift_side } },
  --   { position = { x=lside_x, y=0, z=rside_z_start - 6*shift_side } },
  -- })
  spawnObject({
    type = "go_game_piece_white",
    position = {x=tracker_x + ul_x, y=tracker_y + 3, z=tracker_z + ul_z},
    scale = {x=0.5, y=0.5, z=0.5},
    callback_function = |newObj| newObj.setName("Noise Tracker")
  })
end

function spawnEventDeck(front, back, n, deck_y) spawnDeck(front, back, "Events", n, deck_y, -10, 1, {"Event"}) end
function spawnCrisisDeck(front, back, n)        spawnDeck(front, back, "Crises", n, 15, -15, 0.72, {"Crisis"}) end
function spawnCharacterDeck(front, back, n)     spawnDeck(front, back, "Characters", n, 15, -20, 2, {"Character"}) end
function spawnSkillDeck(front, back, n)         spawnDeck(front, back, "Skills", n, 15, -25, 1.38, {"Skill"}) end
function spawnItemDeck(front, back, n)          spawnDeck(front, back, "Items", n, 15, -30, 1.38, {"Item"}) end
function spawnFixerDeck(front, back, n)         spawnDeck(front, back, "Fixers", n, 15, -32, 2 , {"Fixer"}) end
function spawnNPCDeck(front, back, n)           spawnDeck(front, back, "NPCs", n, 15, -34, 2 , {"Character", "NPC"}) end

function spawnDeck(front, back, name, n, deck_y, deck_z, s, tags)
  local url = "https://andymeneely.github.io/project-timber-wolf/"
  local deck_x = -48
  local random_url_arg = "?v=" .. math.random() -- break the image cache on TTS
  local obj = spawnObject({
    type = "DeckCustom",
    position = {x=deck_x, y=deck_y, z=deck_z},
    rotation = {x=0, y = 180, z=0},
    scale = {x=s, y=s, z=s},
    callback_function = function(newObj)
      newObj.setName(name)
      newObj.setTags(tags)
    end
  })
  -- if n < 6 then
  --   local num_h = 1
  -- else
  -- end
  local num_h = 5
  obj.setCustomObject({
    face = url .. front .. random_url_arg,
    back = url .. back .. random_url_arg,
    width = 5,
    height = num_h,
    number = n,
    unique_back = true,
    back_is_hidden = true
  })
end

function respawnTips()
  -- spawnTip("Use Controls to toggle tips", -30.12, -5.88)

end

function spawnTip(str, tip_x, tip_z)
  local obj = spawnObject({
    type = "3DText",
    position = {x=tip_x, y=1.0, z=tip_z},
    rotation = {x=90, y=0, z=0},
    callback_function = function(newObj)
      newObj.setValue("Tip: hello, world!")
    end
  })
  obj.TextTool.setFontColor(gray)
end
